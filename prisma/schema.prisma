// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  gardenUsers  GardenUser[]  
  tasks        Task[]     
  aiMessages   AIMessage[]  
  supplies      Supply[] 
}

model GardenUser {
  id            Int       @id @default(autoincrement())
  name          String
  crop          String
  plantingDate  DateTime
  sizeInM2      Float
  location      String?
  isActive      Boolean   // Changed to Boolean
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  careRecords   Care[]
  harvests      Harvest[]
}

model Care {
  id          Int      @id @default(autoincrement())
  type        String   // Ex: irrigation, fertilization
  description String
  date        DateTime
  gardenId    Int
  garden      GardenUser   @relation(fields: [gardenId], references: [id])
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  priority    String   // Ex: High, Medium, Low
  assignee    String   // Optional: could be User relation
  isCompleted Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model AIMessage {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Harvest {
  id          Int      @id @default(autoincrement())
  harvestDate DateTime
  yieldKg     Float
  observations String?
  gardenId    Int
  garden      GardenUser   @relation(fields: [gardenId], references: [id])
}

model SupplyUnit {
  id       Int      @id @default(autoincrement())
  name     String   @unique  // ex: "kg", "g", "un"
  supplies Supply[]
}

model SupplyCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  supplies Supply[]
}

model Supply {
  id           Int             @id @default(autoincrement())
  name         String
  quantity     Float
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  categoryId   Int
  category     SupplyCategory  @relation(fields: [categoryId], references: [id])
  unitId       Int
  unit         SupplyUnit      @relation(fields: [unitId], references: [id])
  userId       Int
  user         User            @relation(fields: [userId], references: [id])
  isActive     Boolean         @default(true)
}
